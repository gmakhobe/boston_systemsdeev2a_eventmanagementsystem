/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.eventmanagementsystem;

import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bbdnet2332
 */
public class EventPlanning extends javax.swing.JFrame {

    /**
     * Creates new form EventPlanning
     */
    DefaultTableModel eventManagementJTable;
    private int eventId;
    
    public EventPlanning() {
        initComponents();
        
        eventManagementJTable = (DefaultTableModel) tableEventPlanning.getModel();
        this.eventId = 0;
        writeDatabaseInfoToTable(true);
        TableEventManager();
        
    }
    
    public void TableEventManager(){
        tableEventPlanning.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tableEventPlanning.getSelectedRow();

                if (selectedRow != -1) {

                    // Get values from the selected row
                    int columnCount = this.eventManagementJTable.getColumnCount();
                    Vector rowData = new Vector();
                    for (int i = 0; i < columnCount; i++) {
                        rowData.add(this.eventManagementJTable.getValueAt(selectedRow, i));
                    }

                    this.eventId = Integer.parseInt((String) rowData.get(0));
                    
                    textfieldEventName.setText((String)rowData.get(1));
                    textfieldEventDate.setText((String) rowData.get(2));
                    textfieldEventTime.setText((String) rowData.get(3));
                    textfieldEventDescription.setText((String) rowData.get(4));
                    textfieldOrganisersInformation.setText((String) rowData.get(5));
                }
            }
        });
    }
    
    public void writeDatabaseInfoToTable(boolean initial){
        Database db = new Database();
        Vector information = db.selectAllDataFromATable("events");
        Vector data = (Vector<Vector>) information.get(0);
        Vector columns = (Vector<String>) information.get(1);
        int tableRows = this.eventManagementJTable.getRowCount();
        
        for (int i = tableRows - 1; i >= 0; i--){
                this.eventManagementJTable.removeRow(i);
        }
        
        
        if (initial) {
            for (var columnName : columns){
                this.eventManagementJTable.addColumn(columnName);
            }
        }
        
        int rowsSize = data.size();
   
        for (int i = 0; i < rowsSize; i++) {
            this.eventManagementJTable.addRow((Vector<?>) data.get(i));
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textfieldEventName = new javax.swing.JTextField();
        textfieldEventTime = new javax.swing.JTextField();
        textfieldOrganisersInformation = new javax.swing.JTextField();
        textfieldEventDate = new javax.swing.JTextField();
        textfieldEventDescription = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEventPlanning = new javax.swing.JTable();
        buttonAddEvent = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        buttonEventEdit = new javax.swing.JButton();
        buttonEventDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Event Planning");

        jLabel2.setText("Event Name:");

        jLabel3.setText("Date");

        jLabel4.setText("Time:");

        jLabel5.setText("Description:");

        jLabel6.setText("Organiser Information");

        textfieldEventName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldEventNameActionPerformed(evt);
            }
        });

        textfieldEventTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldEventTimeActionPerformed(evt);
            }
        });

        tableEventPlanning.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableEventPlanning);

        buttonAddEvent.setText("Insert");
        buttonAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddEventActionPerformed(evt);
            }
        });

        buttonBack.setText("Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonEventEdit.setText("Edit");
        buttonEventEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEventEditActionPerformed(evt);
            }
        });

        buttonEventDelete.setText("Delete");
        buttonEventDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEventDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(406, 406, 406))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textfieldOrganisersInformation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldEventName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(69, 69, 69)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textfieldEventTime, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textfieldEventDate)
                            .addComponent(textfieldEventDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonAddEvent)
                                .addGap(105, 105, 105)
                                .addComponent(buttonEventEdit)
                                .addGap(130, 130, 130)
                                .addComponent(buttonEventDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonBack))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(textfieldEventName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textfieldEventDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textfieldEventTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(textfieldEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textfieldOrganisersInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddEvent)
                    .addComponent(buttonBack)
                    .addComponent(buttonEventEdit)
                    .addComponent(buttonEventDelete))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldEventNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldEventNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldEventNameActionPerformed

    private void textfieldEventTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldEventTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldEventTimeActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        HomeScreen homeScreen = new HomeScreen();
        homeScreen.show();
        
        this.hide();
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddEventActionPerformed
        String eventName = textfieldEventName.getText();
        String eventDate = textfieldEventDate.getText();
        String eventTime = textfieldEventTime.getText();
        String eventDescription = textfieldEventDescription.getText();
        String organisersInformation = textfieldOrganisersInformation.getText();
        InputValidation inputVal = new InputValidation();
        
        if (inputVal.isFieldEmpty(eventName, "Event Name") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDate, "Event Date") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventTime, "Event Time") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDescription, "Event Description") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(organisersInformation, "Organisers Information") == true) {
            return ;
        }
        
        Database db = new Database();
        String sqlStatement = "INSERT INTO events (event_name, date, time, description, organiser_details)" +
                    "VALUES ('"+ eventName +"', '"+ eventDate +"', '" + eventTime +"', '" + eventDescription +"', '" + organisersInformation +"');";
        if (db.insertDataIntoATable(sqlStatement)){
            JOptionPane.showMessageDialog(null, "Information Captured successfully.");
        }else{
            JOptionPane.showMessageDialog(null, "Information Failed Captured.");
        }
        
        textfieldEventName.setText("");
        textfieldEventDate.setText("");
        textfieldEventTime.setText("");
        textfieldEventDescription.setText("");
        textfieldOrganisersInformation.setText("");
        writeDatabaseInfoToTable(false);
    }//GEN-LAST:event_buttonAddEventActionPerformed

    private void buttonEventEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEventEditActionPerformed
        String eventName = textfieldEventName.getText();
        String eventDate = textfieldEventDate.getText();
        String eventTime = textfieldEventTime.getText();
        String eventDescription = textfieldEventDescription.getText();
        String organisersInformation = textfieldOrganisersInformation.getText();
        InputValidation inputVal = new InputValidation();
        
        if (inputVal.isFieldEmpty(eventName, "Event Name") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDate, "Event Date") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventTime, "Event Time") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDescription, "Event Description") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(organisersInformation, "Organisers Information") == true) {
            return ;
        }
        
        Database db = new Database();
        String sqlStatement =   "UPDATE events " +
                                "SET event_name = '"+eventName+"'," +
                                " date = '"+eventDate+"'," +
                                " time = '"+eventTime+"'," +
                                " description = '"+eventDescription+"'," +
                                " organiser_details = '"+organisersInformation+"' " +
                                " WHERE event_id = "+ this.eventId +";";
        if (db.insertDataIntoATable(sqlStatement)){
            JOptionPane.showMessageDialog(null, "Information Updated successfully.");
        }else{
            JOptionPane.showMessageDialog(null, "Information Failed To Update.");
        }
        
        writeDatabaseInfoToTable(false);
        textfieldEventName.setText("");
        textfieldEventDate.setText("");
        textfieldEventTime.setText("");
        textfieldEventDescription.setText("");
        textfieldOrganisersInformation.setText("");
        this.eventId = 0;
    }//GEN-LAST:event_buttonEventEditActionPerformed

    private void buttonEventDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEventDeleteActionPerformed
        if (this.eventId < 1) {
            JOptionPane.showMessageDialog(null, "Please select row first to delete from the table.");
            return ;
        }
        
        String eventName = textfieldEventName.getText();
        String eventDate = textfieldEventDate.getText();
        String eventTime = textfieldEventTime.getText();
        String eventDescription = textfieldEventDescription.getText();
        String organisersInformation = textfieldOrganisersInformation.getText();
        InputValidation inputVal = new InputValidation();
        
        if (inputVal.isFieldEmpty(eventName, "Event Name") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDate, "Event Date") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventTime, "Event Time") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(eventDescription, "Event Description") == true) {
            return ;
        }
        if (inputVal.isFieldEmpty(organisersInformation, "Organisers Information") == true) {
            return ;
        }
        
        Database db = new Database();
        String sqlStatement =   "DELETE FROM events WHERE event_id = "+ this.eventId +";";
        if (db.insertDataIntoATable(sqlStatement)){
            JOptionPane.showMessageDialog(null, "Information Deleted successfully.");
        }else{
            JOptionPane.showMessageDialog(null, "Information Failed To Delete.");
        }
        
        writeDatabaseInfoToTable(false);
        textfieldEventName.setText("");
        textfieldEventDate.setText("");
        textfieldEventTime.setText("");
        textfieldEventDescription.setText("");
        textfieldOrganisersInformation.setText("");
        this.eventId = 0;
    }//GEN-LAST:event_buttonEventDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventPlanning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventPlanning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventPlanning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventPlanning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventPlanning().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddEvent;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonEventDelete;
    private javax.swing.JButton buttonEventEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableEventPlanning;
    private javax.swing.JTextField textfieldEventDate;
    private javax.swing.JTextField textfieldEventDescription;
    private javax.swing.JTextField textfieldEventName;
    private javax.swing.JTextField textfieldEventTime;
    private javax.swing.JTextField textfieldOrganisersInformation;
    // End of variables declaration//GEN-END:variables
}
